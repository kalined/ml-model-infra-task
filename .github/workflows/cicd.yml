name: Build, train, scan and deploy the model 

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: "kalined/ml-app-demo"

jobs:
  build_train:
    env:
      RUN_NUMBER: "${{ github.run_number }}"
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{ env.DOCKER_IMAGE }}
      run_number: ${{ env.RUN_NUMBER }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Determine latest week
        id: pick_week
        run: |
          latest=$(ls mnist_images/weeks \
                   | grep -E '^week [0-9]+' \
                   | sort -V \
                   | tail -n1)
          echo "WEEK=$latest" >> $GITHUB_ENV

      - name: Check contents of latest week
        run: |
          echo "Checking contents of ./mnist_images/weeks/${{ env.WEEK }}/"
          ls -la "./mnist_images/weeks/${{ env.WEEK }}/"

      - name: Unpack images into latest week
        run: |
          rm -f "./mnist_images/weeks/${{ env.WEEK }}/.gitkeep"

          tar --strip-components=1 -xf "./mnist_images/weeks/${{ env.WEEK }}/mnist-images.tar.gz" -C "./mnist_images/weeks/${{ env.WEEK }}/"

          echo "Contents of ./mnist_images/weeks/${{ env.WEEK }}/ after extraction:"
          ls -la "./mnist_images/weeks/${{ env.WEEK }}/"

      - name: Set up Python
        uses: actions/setup-python@v4
        with: 
            python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install notebook papermill

      - name: Execute notebook on ${{ env.WEEK }}
        run: |
          papermill notebook-mnist.ipynb \
                    retrained.ipynb \
                    -p WEEK "${{ env.WEEK }}" \
                    --log-output
        shell: bash

      - name: Upload retrained model
        uses: actions/upload-artifact@v4
        with:
          name: mnist_model_${{ env.WEEK }}_production
          path: supported_model/mnist_model.h5

      - name: Docker image build
        id: docker-image-build
        uses: ./.github/actions/demo-docker-build
        with:
          docker_image_name: ${{ env.DOCKER_IMAGE }}
          docker_image_tag: v${{ env.RUN_NUMBER }}
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_token: ${{ secrets.DOCKER_TOKEN }}

  scan:
    runs-on: ubuntu-latest
    needs: build_train
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'docker.io/${{ env.DOCKER_IMAGE }}:v${{ needs.build_train.outputs.run_number }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
        env:
          TRIVY_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.DOCKER_TOKEN }}

  create-cluster-deploy:
    runs-on: ubuntu-latest
    needs: [scan, build_train]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Install Minikube
      run: |
        curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        chmod +x minikube
        sudo mv minikube /usr/local/bin/

    - name: Start Minikube (Docker driver)
      run: |
        minikube start --driver=docker
        kubectl config use-context minikube

    - uses: azure/setup-helm@v4.3.0
      id: install
      with:
        version: 'latest'
   
    - name: Deploy project with Helm
      run: |
        helm upgrade \
          --install \
          --set image.tag=v${{ needs.build_train.outputs.run_number }} \
          --set image.repository=docker.io/${{ env.DOCKER_IMAGE }} \
          --set livenessProbe.httpGet.path=/liveness \
          --set readinessProbe.httpGet.path=/readiness \
          ml-predict ml-predict

    - name: Install curl and jq
      run: sudo apt-get update && sudo apt-get install -y curl jq

    - name: Wait for pods to be ready
      run: |
        echo "Getting pod status before waiting..."
        kubectl get pods -A -o wide
        echo "Describing pods..."
        kubectl describe pods -l app.kubernetes.io/name=ml-predict

    - name: Test application
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=ml-predict --timeout=300s

        # Port-forward the service
        kubectl port-forward svc/ml-predict 8000:8000 &

        # Wait for port-forwarding to start
        sleep 5

        # Test the /predict endpoint
        curl -s -X POST "http://localhost:8000/predict" \
          -H "Content-Type: multipart/form-data" \
          -F "file=@images/$IMAGE" | jq
      shell: bash
      env:
        IMAGE: ${{ vars.MNIST_IMAGE_FILE_NAME }} # 00443_label_1.png